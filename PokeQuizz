<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Quiz Pok√©mon</title>
  <style>
    body {
      background-color: #121212;
      color: #f0f0f0;
      font-family: Arial, sans-serif;
      text-align: center;
      padding: 20px;
    }
    .pokemon-card {
      border: 2px solid #444;
      border-radius: 10px;
      padding: 10px;
      margin: 10px auto;
      width: 300px;
      background-color: #1e1e1e;
    }
    .correct {
      background-color: #2e7d32;
      border-color: #66bb6a;
    }
    .incorrect {
      background-color: #b71c1c;
      border-color: #ef5350;
    }
    input, button {
      padding: 8px;
      margin: 5px;
      border-radius: 6px;
      border: none;
      font-size: 16px;
    }
    input[type="text"], input[type="number"] {
      width: 200px;
    }
    button {
      background-color: #333;
      color: white;
      cursor: pointer;
    }
    button:hover {
      background-color: #555;
    }
    img {
      height: 80px;
    }
    .bold {
      font-weight: bold;
    }
    .info-box {
      margin-top: 20px;
      font-size: 18px;
      background-color: #1e1e1e;
      padding: 15px;
      border-radius: 10px;
      display: inline-block;
    }
    #game, #results {
      margin-top: 30px;
    }
    #controls {
      margin-bottom: 20px;
    }
    .footer {
      margin-top: 40px;
    }
  </style>
</head>
<body>
  <h1>Jeu : Devine les noms des Pok√©mon</h1>

  <div id="controls">
    <div>
      <label>Nombre de Pok√©mon √† deviner :
        <input type="number" id="pokemonCount" value="20" min="1" max="100">
      </label>
    </div>

    <label>
      <input type="checkbox" id="newOnlyCheckbox"> Uniquement Pok√©mon non encore trouv√©s
    </label>
    <br>

    <button onclick="startGame()">Nouvelle Partie</button>
    <div style="margin-bottom: 10px;">
      <strong>S√©rie actuelle :</strong> <span id="currentStreak">0</span> |
      <strong>Meilleure s√©rie :</strong> <span id="bestStreak">0</span>
    </div>
  </div>

  <div id="game"></div>
  <div id="roundInfo" style="margin-top:10px;"></div>
  <div id="results"></div>

  <div id="genProgression" class="info-box">
    <strong>S√©lectionner les g√©n√©rations √† deviner :</strong>
    <div id="genCheckboxes" style="margin-top:10px;text-align:left;"></div>
  </div>

  <div class="footer">
    <button onclick="resetProgress()">üîÅ Reset All Progression</button>
    <div id="resetGenButtons"></div>
    <button onclick="resetStreak()">üîÅ Reset S√©rie</button>
  </div>

  <script>
    const allPokemon = [];
    const generationStats = JSON.parse(localStorage.getItem("genStats") || "{}");
    const genSizes = { 1: 151, 2: 100, 3: 135, 4: 107, 5: 156, 6: 72, 7: 88, 8: 96, 9: 120 };
    let progress = [];

    let currentStreak = +localStorage.getItem("currentStreak") || 0;
    let bestStreak = +localStorage.getItem("bestStreak") || 0;
    document.getElementById("currentStreak").textContent = currentStreak;
    document.getElementById("bestStreak").textContent = bestStreak;

    function resetStreak() {
      currentStreak = 0;
      bestStreak = 0;
      localStorage.setItem("currentStreak", 0);
      localStorage.setItem("bestStreak", 0);
      document.getElementById("currentStreak").textContent = 0;
      document.getElementById("bestStreak").textContent = 0;
    }

    function updateStreak(success) {
      if (success) {
        currentStreak++;
        if (currentStreak > bestStreak) bestStreak = currentStreak;
      } else {
        currentStreak = 0;
      }
      localStorage.setItem("currentStreak", currentStreak);
      localStorage.setItem("bestStreak", bestStreak);
      document.getElementById("currentStreak").textContent = currentStreak;
      document.getElementById("bestStreak").textContent = bestStreak;
    }

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
    }

    async function fetchData() {
      const res = await fetch("https://raw.githubusercontent.com/fanzeyi/pokemon.json/master/pokedex.json");
      const data = await res.json();
      allPokemon.length = 0;
      allPokemon.push(...data.map((p, i) => ({
        id: i + 1,
        fr: p.name.french,
        en: p.name.english,
        gen: getGeneration(i + 1)
      })));
    }

    function getGeneration(id) {
      if (id <= 151) return 1;
      if (id <= 251) return 2;
      if (id <= 386) return 3;
      if (id <= 493) return 4;
      if (id <= 649) return 5;
      if (id <= 721) return 6;
      if (id <= 809) return 7;
      if (id <= 905) return 8;
      return 9;
    }

    function resetProgress() {
      localStorage.removeItem("foundPokemon");
      localStorage.removeItem("genStats");
      resetStreak();
      updateProgressInfo();
      alert("Progression r√©initialis√©e !");
    }

    function resetGenScore(gen) {
      generationStats[gen] = 0;
      localStorage.setItem("genStats", JSON.stringify(generationStats));
      updateProgressInfo();
    }

    function updateProgressInfo() {
      const genCheckboxes = document.getElementById("genCheckboxes");
      const resetContainer = document.getElementById("resetGenButtons");
      const savedGens = JSON.parse(localStorage.getItem("selectedGens") || "[]");

      genCheckboxes.innerHTML = '';
      resetContainer.innerHTML = '';

      for (let g = 1; g <= 9; g++) {
        const count = generationStats[g] || 0;
        const max = genSizes[g] || 0;
        const percent = max > 0 ? ((count / max) * 100).toFixed(2) : "0.00";

        const row = document.createElement("div");
        row.style = "margin-bottom: 8px; display: flex; align-items: center; gap: 8px;";

        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.value = g;
        checkbox.checked = savedGens.length ? savedGens.includes(g) : true;

        const label = document.createElement("label");
        label.textContent = `G√©n ${g} : ${count} / ${max} trouv√©s (${percent}%)`;
        label.style = "flex: 1;";

        const progressBar = document.createElement("div");
        progressBar.style = "background:#444;border-radius:4px;overflow:hidden;height:10px;width:100%;margin-top:4px;";
        progressBar.innerHTML = `<div style="width:${percent}%;background:#4caf50;height:10px;"></div>`;

        const container = document.createElement("div");
        container.style = "flex: 1;";
        container.appendChild(label);
        container.appendChild(progressBar);

        row.appendChild(checkbox);
        row.appendChild(container);

        genCheckboxes.appendChild(row);

        const btn = document.createElement("button");
        btn.textContent = `Reset G√©n ${g}`;
        btn.onclick = () => resetGenScore(g);
        resetContainer.appendChild(btn);
      }
    }

    function normalizeName(str) {
      return str.toLowerCase()
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
        .replace(/[^a-z0-9]/gi, '')
        .replace(/‚ôÄ|‚ôÇ/g, '')
        .trim();
    }

    async function startGame() {
      await fetchData();
      const selectedGens = Array.from(document.querySelectorAll("#genCheckboxes input:checked")).map(cb => +cb.value);
      const pokemonCount = +document.getElementById("pokemonCount").value;
      const onlyNew = document.getElementById("newOnlyCheckbox").checked;
      localStorage.setItem("selectedGens", JSON.stringify(selectedGens));
      localStorage.setItem("pokemonCount", pokemonCount);
      localStorage.setItem("newOnly", onlyNew);

      const found = new Set(JSON.parse(localStorage.getItem("foundPokemon") || "[]"));
      const pool = allPokemon.filter(p => selectedGens.includes(p.gen) && (!onlyNew || !found.has(p.id)));
      shuffleArray(pool);
      const sample = pool.slice(0, pokemonCount);

      const game = document.getElementById("game");
      const results = document.getElementById("results");
      game.innerHTML = '';
      results.innerHTML = '';
      progress = [];
      let current = 0;
      let skipped = false;
      let madeMistake = false;

      function showNext() {
        if (current >= sample.length) {
          document.getElementById("game").innerHTML = '';
          document.getElementById("roundInfo").textContent = '';
          showResults();
          return;
        }

        const pkm = sample[current];
        game.innerHTML = `
          <div class="pokemon-card">
            <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pkm.id}.png"><br>
            <input id="guess" placeholder="Nom FR ou EN" type="text">
            <button onclick="skip()">Passer</button>
            <button onclick="submitGuess()">Valider</button>
            <div id="feedback"></div>
          </div>
        `;
        document.getElementById("roundInfo").textContent = `Pok√©mon ${current + 1} / ${sample.length}`;

        const input = document.getElementById("guess");
        input.focus();
        input.addEventListener("keydown", function (e) {
          if (e.key === "Enter") {
            submitGuess();
          }
        });
      }

      window.submitGuess = function () {
        if (current >= sample.length) return;
        const input = document.getElementById("guess");
        const val = input.value.trim().toLowerCase();
        const pkm = sample[current];
        const correct = [pkm.fr, pkm.en].some(name => normalizeName(name) === normalizeName(val));
        const feedback = document.getElementById("feedback");

        if (correct) {
          feedback.innerHTML = `<span style="color:lightgreen">‚úÖ Bonne r√©ponse !</span>`;
          showNotification(`‚úÖ ${pkm.fr} ajout√© !`);
          progress.push({ ...pkm, correct: true, last: val });
          found.add(pkm.id);
          generationStats[pkm.gen] = (generationStats[pkm.gen] || 0) + 1;
          localStorage.setItem("foundPokemon", JSON.stringify(Array.from(found)));
          localStorage.setItem("genStats", JSON.stringify(generationStats));
          updateProgressInfo();
          updateStreak(!madeMistake && !skipped);
          current++;
          skipped = false;
          madeMistake = false;
          setTimeout(showNext, 700);
        } else {
          feedback.innerHTML = `<span style="color:salmon">‚ùå Incorrect</span>`;
          madeMistake = true;
          input.select();
        }
      };

      window.skip = function () {
        if (current >= sample.length) return;
        const val = document.getElementById("guess").value.trim().toLowerCase() || "aucune";
        const pkm = sample[current];
        progress.push({ ...pkm, correct: false, last: val });
        updateStreak(false);
        skipped = true;
        current++;
        showNext();
      };

      showNext();
    }

    function showResults() {
      const results = document.getElementById("results");
      const correctCount = progress.filter(p => p.correct).length;
      results.innerHTML = `<h2>R√©sultats : ${correctCount} / ${progress.length}</h2>`;
      progress.forEach(pkm => {
        const div = document.createElement("div");
        div.className = "pokemon-card " + (pkm.correct ? "correct" : "incorrect");
        div.innerHTML = `
          <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pkm.id}.png"><br>
          <span class="bold">${pkm.fr} (${pkm.en})</span><br>
          Derni√®re r√©ponse : <em>${pkm.last}</em>
        `;
        results.appendChild(div);
      });
    }

    function showNotification(text) {
      const notif = document.createElement("div");
      notif.textContent = text;
      notif.style.cssText = "position:fixed;bottom:10px;right:10px;color:#0f0;background:#222;padding:10px;border-radius:8px;z-index:1000;";
      document.body.appendChild(notif);
      setTimeout(() => notif.remove(), 2000);
    }

    updateProgressInfo();
  </script>
</body>
</html>
